// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adroll/ecs-ship/clients (interfaces: ECSClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/ecs.go . ECSClient
//

// Package mock_clients is a generated GoMock package.
package mock_clients

import (
	context "context"
	reflect "reflect"
	time "time"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"
	types "github.com/aws/aws-sdk-go-v2/service/ecs/types"
	gomock "go.uber.org/mock/gomock"
)

// MockECSClient is a mock of ECSClient interface.
type MockECSClient struct {
	ctrl     *gomock.Controller
	recorder *MockECSClientMockRecorder
	isgomock struct{}
}

// MockECSClientMockRecorder is the mock recorder for MockECSClient.
type MockECSClientMockRecorder struct {
	mock *MockECSClient
}

// NewMockECSClient creates a new mock instance.
func NewMockECSClient(ctrl *gomock.Controller) *MockECSClient {
	mock := &MockECSClient{ctrl: ctrl}
	mock.recorder = &MockECSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSClient) EXPECT() *MockECSClientMockRecorder {
	return m.recorder
}

// CopiedTaskDefinition mocks base method.
func (m *MockECSClient) CopiedTaskDefinition(output *ecs.DescribeTaskDefinitionOutput) *ecs.RegisterTaskDefinitionInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopiedTaskDefinition", output)
	ret0, _ := ret[0].(*ecs.RegisterTaskDefinitionInput)
	return ret0
}

// CopiedTaskDefinition indicates an expected call of CopiedTaskDefinition.
func (mr *MockECSClientMockRecorder) CopiedTaskDefinition(output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopiedTaskDefinition", reflect.TypeOf((*MockECSClient)(nil).CopiedTaskDefinition), output)
}

// DoesServiceLookGood mocks base method.
func (m *MockECSClient) DoesServiceLookGood(ctx context.Context, service *types.Service) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesServiceLookGood", ctx, service)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesServiceLookGood indicates an expected call of DoesServiceLookGood.
func (mr *MockECSClientMockRecorder) DoesServiceLookGood(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesServiceLookGood", reflect.TypeOf((*MockECSClient)(nil).DoesServiceLookGood), ctx, service)
}

// GetService mocks base method.
func (m *MockECSClient) GetService(ctx context.Context, clusterName, serviceName string) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", ctx, clusterName, serviceName)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockECSClientMockRecorder) GetService(ctx, clusterName, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockECSClient)(nil).GetService), ctx, clusterName, serviceName)
}

// GetTaskDefinition mocks base method.
func (m *MockECSClient) GetTaskDefinition(ctx context.Context, service *types.Service) (*ecs.DescribeTaskDefinitionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskDefinition", ctx, service)
	ret0, _ := ret[0].(*ecs.DescribeTaskDefinitionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskDefinition indicates an expected call of GetTaskDefinition.
func (mr *MockECSClientMockRecorder) GetTaskDefinition(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskDefinition", reflect.TypeOf((*MockECSClient)(nil).GetTaskDefinition), ctx, service)
}

// RegisterTaskDefinition mocks base method.
func (m *MockECSClient) RegisterTaskDefinition(ctx context.Context, input *ecs.RegisterTaskDefinitionInput) (*types.TaskDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTaskDefinition", ctx, input)
	ret0, _ := ret[0].(*types.TaskDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTaskDefinition indicates an expected call of RegisterTaskDefinition.
func (mr *MockECSClientMockRecorder) RegisterTaskDefinition(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTaskDefinition", reflect.TypeOf((*MockECSClient)(nil).RegisterTaskDefinition), ctx, input)
}

// UpdateTaskDefinition mocks base method.
func (m *MockECSClient) UpdateTaskDefinition(ctx context.Context, service *types.Service, task *types.TaskDefinition) (*types.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskDefinition", ctx, service, task)
	ret0, _ := ret[0].(*types.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskDefinition indicates an expected call of UpdateTaskDefinition.
func (mr *MockECSClientMockRecorder) UpdateTaskDefinition(ctx, service, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskDefinition", reflect.TypeOf((*MockECSClient)(nil).UpdateTaskDefinition), ctx, service, task)
}

// WaitForServiceToLookGood mocks base method.
func (m *MockECSClient) WaitForServiceToLookGood(ctx context.Context, service *types.Service, timeout time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForServiceToLookGood", ctx, service, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForServiceToLookGood indicates an expected call of WaitForServiceToLookGood.
func (mr *MockECSClientMockRecorder) WaitForServiceToLookGood(ctx, service, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForServiceToLookGood", reflect.TypeOf((*MockECSClient)(nil).WaitForServiceToLookGood), ctx, service, timeout)
}
